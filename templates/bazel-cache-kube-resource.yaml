---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }} 
  labels:
    app.kubernetes.io/name: {{ .Release.Name }} 
    app.kubernetes.io/instance: {{ .Release.Name }} 
automountServiceAccountToken: false
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }} 
  labels:
    app.kubernetes.io/name: {{ .Release.Name }} 
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: {{ .Release.Name }} 
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- if not (default .Values.s3.enabled false) }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteMany 
  storageClassName: {{ .Values.pvc.storageClass }}
  resources:
    requests:
      storage: {{ .Values.pvc.size }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
        - name: {{ .Release.Name }} 
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
        {{- if (default .Values.s3.enabled false)}}
          env:
          - name: BAZEL_REMOTE_S3_ENDPOINT
            value: {{ .Values.s3.endpoint }} 
          - name: BAZEL_REMOTE_S3_BUCKET
            value: {{ .Values.s3.bucket }} 
          - name: BAZEL_REMOTE_S3_AUTH_METHOD
            value: {{ .Values.s3.authMethod }} 
        {{- else }}
          volumeMounts:
            - name: storage-cache
              mountPath: /data
        {{- end }}
      {{- if (default .Values.sidecar.enabled false) }}
        - name: "{{ .Values.sidecar.name }}"
          image: "{{ .Values.sidecar.repository }}:{{ .Values.sidecar.tag }}"
          imagePullPolicy: {{ .Values.sidecar.pullPolicy }}
       {{- end }}
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /status
          #    port: http
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 128Mi
{{- if not (default .Values.s3.enabled false)}}
      volumes:
        - name: storage-cache
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }} 
  labels:
    app.kubernetes.io/name: {{ .Release.Name }} 
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Release.Name }}.{{ .Values.dnsSuffix }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }} 
                port:
                  number: 8080
  tls:
    - hosts:
        - "{{ .Release.Name }}.{{ .Values.dnsSuffix }}"
      secretName: {{ .Release.Name }}-tls
